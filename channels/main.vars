package main

import (
	"fmt"
	"net/http"
	"time"
)

// Serial processing problem
func main() {
	links := []string{
		"http://google.com",
		"http://facebook.com",
		"http://espn.com",
		"http://yahoo.com",
		"http://golang.org",
	}
	// Implement channels to manage inter child routine communication
	c := make(chan string)
	for _, i := range links {
		//Add go routine for concurrence
		go ret_status(i, c)
		//<-c
		//fmt.Println((<-c))
	}
	//Print out string received by c from child go routines
	//Issue is only one return message will be detected by main, so only one re_status result will be visible.
	// Will need same amount of <-c as for loop cycles or add it to above for loop
	//fmt.Println((<-c))
	//for i := 0; i < len(links); i++ {
	// Now do an infinite loop to continously check page status
	// for {
	// 	//fmt.Println(<-c)
	// 	// What if we wanted to start back done child for continous status checks???
	// 	go ret_status(<-c, c)
	// }
	// Alternate for loop for readability
	for l := range c {
		//fmt.Println(<-c)
		// What if we wanted to start back done child for continous status checks???
		//go ret_status(l, c)
		//Function Literal
		go func(link string) {
			time.Sleep(5 * time.Second)
			ret_status(link, c)
		}(l)
	}

}
func ret_status(link string, c chan string) {
	_, err := http.Get("http://example.com/")
	if err != nil {
		fmt.Println(link + " is down!")
		// Send string "Down to the channel"
		//c <- "Down"
		// What if we wanted to start back done child for continous status checks???
		c <- link
		return
	}
	fmt.Println(link + " is up!")
	// Send string "Up to the channel"
	//c <- "Up"
	// What if we wanted to start back done child for continous status checks???
	c <- link

}
